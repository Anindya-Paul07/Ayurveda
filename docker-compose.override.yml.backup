version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx-dev.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - logs:/var/log/nginx
    depends_on:
      - backend-dev
      - frontend-dev
    networks:
      - app-network

  backend-dev:
    build:
      context: .
      dockerfile: back/Dockerfile.dev
    environment:
      - FLASK_DEBUG=1
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ayurveda
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ayurveda
      - FLASK_APP=app.py
    volumes:
      - ./back:/app
      - /app/__pycache__
    ports:
      - "5002:5000"
      - "5678:5678"
    command: >
      sh -c "python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m flask run --host=0.0.0.0 --port=5000 --debug"
    depends_on:
      - redis
      - postgres
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ayurveda
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - REACT_APP_BACKEND_URL=http://localhost:5002
      - REACT_APP_API_URL=/api
      - REACT_APP_WS_URL=ws://localhost/ws
      - GENERATE_SOURCEMAP=false
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/build
      - /app/.next
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true
    networks:
      - app-network
    depends_on:
      - backend-dev

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  logs:
